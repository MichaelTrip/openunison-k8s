---
apiVersion: openunison.tremolo.io/v1
kind: AuthenticationChain
metadata:
  name: enterprise-idp
  namespace: {{ .Release.Namespace }}
spec:
  level: 20
  root: o=Data
  authMechs:
{{ if .Values.active_directory }}
  - name: login-form
    required: required
    params:
      FORMLOGIN_JSP: "/auth/forms/defaultForm.jsp"
    secretParams: []
  - name: map
    required: required
    params:
      map: 
      - "uid|composite|${uid}"
      - "mail|composite|${mail}"
      - "givenName|composite|${givenName}"
      - "sn|composite|${sn}"
      - "displayName|composite|${displayName}"
      - "memberOf|user|memberOf"
{{ end }}
{{ if .Values.oidc }}
  - name: oidc
    required: required
    params:
      bearerTokenName: oidcBearerToken
      clientid: {{ .Values.oidc.client_id | quote }}
      responseType: code
      idpURL: {{ .Values.oidc.auth_url | quote }}
      loadTokenURL: {{ .Values.oidc.token_url | quote }}
      scope: {{ .Values.oidc.scopes | quote }}
      linkToDirectory: "false"
      noMatchOU: "oidc"
      lookupFilter: "(uid=${sub})"
      defaultObjectClass: inetOrgPerson
      uidAttr: sub
      hd: {{ .Values.oidc.domain | quote }}
      {{ if .Values.oidc.user_in_idtoken }}
      userLookupClassName: "com.tremolosecurity.unison.proxy.auth.openidconnect.loadUser.LoadJWTFromAccessToken"
      jwtTokenAttributeName: "id_token"
      {{ else }}
      userLookupClassName: "com.tremolosecurity.unison.proxy.auth.openidconnect.loadUser.LoadAttributesFromWS"
      restURL: {{ .Values.oidc.userinfo_url | quote }}
      {{ end }}
    secretParams:
    - name: secretid
      secretName: orchestra-secrets-source
      secretKey: OIDC_CLIENT_SECRET
  - name: map
    required: required
    params:
      map: 
      - "uid|composite|{{ print "${" .Values.oidc.claims.sub "}" }}"
      - "mail|composite|{{ print "${" .Values.oidc.claims.email "}" }}"
      - "givenName|composite|{{ print "${"  .Values.oidc.claims.given_name "}" }}"
      - "sn|composite|{{ print "${"  .Values.oidc.claims.family_name "}" }}"
      - "displayName|composite|{{ print "${"  .Values.oidc.claims.display_name "}" }}"
      - "memberOf|user|{{ .Values.oidc.claims.groups }}"
{{ end }}
{{ if .Values.github }}
  - name: github
    required: required
    params:
      bearerTokenName: githubToken
      clientid: {{ .Values.github.client_id }}
      scope: "user:read user:email read:org"
      linkToDirectory: "false"
      noMatchOU: github
      lookupFilter: "(uid=${login})"
      uidAttr: login
      defaultObjectClass: inetOrgPerson
    secretParams:
    - name: secretid
      secretName: orchestra-secrets-source
      secretKey: GITHUB_SECRET_ID
  - name: az
    required: required
    params:
      rules: custom;github!{{ .Values.github.teams }}
  - name: map
    required: required
    params:
      map: 
      - "uid|user|login"
      - "mail|static|na"
      - "givenName|static|na"
      - "sn|static|na"
      - "displayName|static|na"
      - "memberOf|user|groups"
{{ end }}
{{ if .Values.saml }}
  - name: saml2
    required: required
    params:
      idpURL: "#[IDP_POST]"
      idpRedirURL: "#[IDP_REDIR]"
      idpSigKeyName: 
      - idp-saml2-sig
      - idp-saml2-sig-1
      ldapAttribute: uid
      dnOU: saml
      defaultOC: inetOrgPerson
      authCtxRef: ""
      spSigKey: unison-saml2-rp-sig
      sigAlg: "RSA-SHA256"
      signAuthnReq: "true"
      assertionsSigned: "#[SAML2_ASSERTION_SIGNED:true]"
      responsesSigned: "#[SAML2_RESPONSE_SIGNED:false]"
      assertionEncrypted: "false"
      spEncKey: ""
      forceToSSL: "false"
      dontLinkToLDAP: "true"
      logoutURL: "https://#[K8S_DASHBOARD_HOST]/logout"
      entityID: "#[IDP_ENTITY_ID]"
      idpRedirLogoutURL: "#[IDP_LOGOUT]"
    secretParams: []
  - name: map
    required: required
    params:
      map: 
      - "uid|composite|${uid}"
      - "mail|composite|${mail}"
      - "givenName|composite|${givenName}"
      - "sn|composite|${sn}"
      - "displayName|composite|${displayName}"
      - "memberOf|user|memberOf"
{{ end }}
  - name: jit
    required: required
    params: 
      nameAttr: uid
      workflowName: jitdb
  - name: genoidctoken
    required: required
    params:
      idpName: k8sIdp
      trustName: kubernetes
---
apiVersion: openunison.tremolo.io/v1
kind: AuthenticationChain
metadata:
  name: login-service
  namespace: {{ .Release.Namespace }}
spec:
  level: 20
  root: o=Tremolo
  authMechs:
  - name: login-service
    required: required
    params:
      chains: "Login=/login/auth"
      serviceUrl: "/auth/forms/chooseLogin.jsp"
      cookieName: "tremoloLoginChoice"
      cookieDays: "30"
    secretParams: []
{{ if .Values.enable_impersonation }}
---
apiVersion: openunison.tremolo.io/v1
kind: AuthenticationChain
metadata:
  name: oauth2jwt
  namespace: {{ .Release.Namespace }}
spec:
  level: 20
  root: o=Tremolo
  authMechs:
  - name: oauth2jwt
    required: required
    params:
      issuer: "https://#[OU_HOST]/auth/idp/k8sIdp"
      validationKey: unison-saml2-rp-sig
      linkToDirectory: "false"
      noMatchOU: oauth2
      uidAttr: sub
      lookupFilter: "(sub=${sub})"
      userLookupClassName: inetOrgPerson
      defaultObjectClass: inetOrgPerson
      realm: kubernetes
      scope: auth
      audience: kubernetes
    secretParams: []
{{ end }}
---
apiVersion: openunison.tremolo.io/v1
kind: AuthenticationChain
metadata:
  name: oauth2k8s
  namespace: {{ .Release.Namespace }}
spec:
  level: 20
  root: o=Tremolo
  authMechs:
  - name: oauth2k8s
    required: required
    params:
      k8sTarget: k8s
      linkToDirectory: "false"
      noMatchOU: oauth2
      uidAttr: username
      lookupFilter: "(uid=${sub})"
      defaultObjectClass: inetOrgPerson
      realm: kubernetes
      scope: auth
    secretParams: []
---
apiVersion: openunison.tremolo.io/v1
kind: AuthenticationChain
metadata:
  name: oauth2jwt-login
  namespace: {{ .Release.Namespace }}
spec:
  level: 20
  root: o=Tremolo
  authMechs:
  - name: oauth2jwt
    required: required
    params:
      issuer: "https://#[OU_HOST]/auth/idp/k8s-login-cli"
      validationKey: unison-saml2-rp-sig
      linkToDirectory: "true"
      noMatchOU: oauth2
      uidAttr: sub
      lookupFilter: "(sub=${sub})"
      userLookupClassName: inetOrgPerson
      defaultObjectClass: inetOrgPerson
      realm: kubernetes
      scope: auth
      audience: cli-local
    secretParams: []
  - name: genoidctoken
    required: required
    params:
      idpName: k8sIdp
      trustName: kubernetes